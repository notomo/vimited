
call themis#option('recursive', 1)

function! VimitedTestAssert() abort
    let assert = themis#helper('assert')

    function! assert.line_number(expected) abort
        let actual = line('.')
        let message = printf('line number should be %s, but actual: %s', a:expected, actual)
        call self.equals(a:expected, actual, message)
    endfunction

    function! assert.column_number(expected) abort
        let actual = col('.')
        let message = printf('column number should be %s, but actual: %s', a:expected, actual)
        call self.equals(a:expected, actual, message)
    endfunction

    function! assert.not_exists_autocmd(name) abort
        let autocmds = s:redir('autocmd')
        for line in split(autocmds, "\n")
            call self.true(count(line, a:name, v:true) == 0, a:name . ' should not be in the autocmd: ' . line)
        endfor
    endfunction

    return assert
endfunction

function! VimitedTestBeforeEach() abort
endfunction

function! VimitedTestAfterEach() abort
    silent! %bwipeout!
endfunction

function! s:redir(cmd) abort
    let [tmp_verbose, tmp_verbosefile] = [&verbose, &verbosefile]
    set verbose=0 verbosefile=
    redir => result
    silent! execute a:cmd
    redir END
    let [&verbose, &verbosefile] = [tmp_verbose, tmp_verbosefile]
    return result
endfunction
